/****************************************
*	Defusing Game Mode					*
*	Author:		steeffeen				*
*	Contact:	mail@steeffeen.com		*
****************************************/

#Extends "Modes/ShootMania/ModeBase.Script.txt"


/****************************************
	INCLUDES
****************************************/

#Include "Libs/Nadeo/ShootMania/Score.Script.txt" as Score
#Include "Libs/Nadeo/ShootMania/SM.Script.txt" as SM


/****************************************
	LABELS
****************************************/

***StartServer***
***
// Enable rounds in modebase
MB_UseSectionRound = True;

// Set mode options
UseClans = True;

// Add bots
Users_SetNbFakeUsers(2, 2);
***

***StartMap***
***
// Begin match
Score::MatchBegin();

// Set the begin of the match
StartTime = Now;
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
***

***StartRound***
***
// Begin round
Score::RoundBegin();
***

***PlayLoop***
***
// Manage players
foreach (Player in Players) {
	switch (Player.SpawnStatus) {
		case CSmPlayer::ESpawnStatus::NotSpawned: {
			
			if (Player.RequestsSpectate) {
				// The player wants to spectate - Do nothing
				continue;
			}
			
			// Spawn the player
			MySpawnPlayer(Player);
		}
		case CSmPlayer::ESpawnStatus::Spawned: {
			
			if (Player.RequestsSpectate) {
				// The player wants to spectate
				UnspawnPlayer(Player);
				continue;
			}
			
			if (Player.RequestedClan != Player.CurrentClan) {
				// The player wants to change its team
				UnspawnPlayer(Player);
				continue;
			}
		}
	}
}

// Manage events
foreach (Event in PendingEvents) {
	switch (Event.Type) {
		case CSmModeEvent::EType::OnHit: {
		
			if (Event.Shooter == Event.Victim) {
				// Self hit
				Discard(Event);
				continue;
			}
			
			if (Event.Shooter.CurrentClan == Event.Victim.CurrentClan) {
				// Team hit
				Discard(Event);
				continue;
			}
			
			// Opponent hit
			
			// Calculate points
			declare Points = Event.Damage / 100;
			
			// Grant points for the shooter
			Score::AddPoints(Event.Shooter, Points);
			
			// Set the amount of + displayed for the shooter
			Event.ShooterPoints = Points;
			
			// Pass on event
			PassOn(Event);
		}
		case CSmModeEvent::EType::OnArmorEmpty: {
			// Player has been eliminated
			PassOn(Event);
		}
		default: {
			// Not used events
			Discard(Event);
		}
	}
}
***

***EndRound***
***
// End round
Score::RoundEnd();
***

***EndMap***
***
// End match
Score::MatchEnd();
***


/****************************************
	FUNCTIONS
****************************************/

// Spawn the given player
Void MySpawnPlayer(CSmPlayer _Player) {
	// Find a spawn block for the player
	declare Spawn <=> BlockSpawns[0];
	
	// Spawn the player in its desired team
	SM::SpawnPlayer(_Player, _Player.RequestedClan, Spawn);
}
